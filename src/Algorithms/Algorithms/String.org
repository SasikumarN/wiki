#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: String / Array
#+OPTIONS: num:nil H:2




* Find the element that appears once
Given an array where every element occurs three times, except one
element which occurs only once. Find the element that occurs once.
Expected time complexity is O(n) and O(1) extra space.

Examples:
#+begin_src sh
Input: arr[] = {12, 1, 12, 3, 12, 1, 1, 2, 3, 3}
Output: 2
#+end_src

Run a loop for all elements in array. At the end of every iteration,
maintain following two values.
+ ones: The bits that have appeared 1st time or 4th time or 7th time
  .. etc.
+ twos: The bits that have appeared 2nd time or 5th time or 8th time
  .. etc.

Both ‘ones’ and ‘twos’ contain those extra bits which appear 3rd
time. Remove these extra bits by finding out common set bits in
‘ones’ and ‘twos’.

[[./Files/find_appears_once.cc]]
#+INCLUDE: "./Files/find_appears_once.cc" src c++
* Count Inversions in an array
Inversion Count for an array indicates – how far (or close) the array
is from being sorted. If array is already sorted then inversion count
is 0. If array is sorted in reverse order that inversion count is the
maximum. 
** Enhance Merge Sort
Time Complexity: O(nlogn)

[[./Files/count_inversions_merge.cc]]

#+INCLUDE: "./Files/count_inversions_merge.cc" src c++
** Using Self-Balancing Binary Search Tree
The idea is to use Self-Balancing Binary Search Tree like Red-Black
Tree, AVL Tree, etc and augment it so that every node also keeps track
of number of nodes in right subtree.

Time complexity of above solution is O(n Log n) as AVL insert takes
O(Log n) time.

[[./Files/count_inversions_bst.cc]]

#+INCLUDE: "./Files/count_inversions_bst.cc" src c++
** Basic Approach using BIT
*size Θ(maxElement)*

+ Time Complexity :- The update function and getSum function runs for
  O(log(maximumelement)) and we are iterating over n elements. So
  overall time complexity is : O(nlog(maximumelement)).
+ Auxiliary space : O(maxElement)

[[./Files/count_inversions_bit.cc]]

#+INCLUDE: "./Files/count_inversions_bit.cc" src c++

*size Θ(n)*

+ Time Complexity :- The update function and getSum function runs for
  O(log(n)) and we are iterating over n elements. So overall time
  complexity is : O(nlogn).
+ Auxiliary space : O(n)

[[./Files/count_inversions_bit_optimize.cc]]

#+INCLUDE: "./Files/count_inversions_bit_optimize.cc" src c++

* MO’s Algorithm
We are given an array and a set of query ranges, we are required to
find sum of every query range.

Example:
#+begin_src sh
Input:  arr[]   = {1, 1, 2, 1, 3, 4, 5, 2, 8};
        query[] = [0, 4], [1, 3] [2, 4]
Output: Sum of arr[] elements in range [0, 4] is 8
        Sum of arr[] elements in range [1, 3] is 4  
        Sum of arr[] elements in range [2, 4] is 6
#+end_src

The idea of MO’s algorithm is to pre-process all queries so that
result of one query can be used in next query. Below are steps.

Let a[0…n-1] be input array and q[0..m-1] be array of queries.

+ Sort all queries in a way that queries with L values from 0 to √n –
  1 are put together, then all queries from √n to 2*√n – 1, and so
  on. All queries within a block are sorted in increasing order of R
  values.
+ Process all queries one by one in a way that every query uses sum
  computed in previous query.
  + Let ‘sum’ be sum of previous query.
  + Remove extra elements of previous query. For example if previous
    query is [0, 8] and current query is [3, 9], then we subtract =a[0]=
    and =a[1]= from sum
  + Add new elements of current query. In the same example as above,
    we add =a[9]= to sum.

+ How much currR is moved? Since there are O(√n) blocks, total
  movement of currR is O(n * √n).
+ How much currL is moved? For m queries, total movement of currL is
  O(m * √n)
+ takes O(n * √n) + O(m * √n) = O((m+n) * √n) time.

[[./Files/MO_algorithm.cc]]

#+INCLUDE: "./Files/MO_algorithm.cc" src c++
** More
compute prefix sum for all elements from 0 to n-1. Let the prefix sum
be stored in an array preSum[] (The value of preSum[i] stores sum of
arr[0..i]). Once we have built preSum[], we can traverse through all
queries one by one. For every query [L, R], we return value of
preSum[R] – preSum[L]. Here processing every query takes O(1) time.

* cc

+INCLUDE: "./Files/" src c++

#+begin_src sh

#+end_src
