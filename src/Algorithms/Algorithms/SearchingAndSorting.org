#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Searching and Sorting
#+OPTIONS: num:nil H:2

* KMP Algorithm
The KMP matching algorithm uses degenerating property (pattern having
same sub-patterns appearing more than once in the pattern) of the
pattern and improves the worst case complexity to O(n). The basic idea
behind KMP’s algorithm is: whenever we detect a mismatch (after some
matches), we already know some of the characters in the text of next
window. We take advantage of this information to avoid matching the
characters that we know will anyway match. 

*Preprocessing Overview:*
+ KMP algorithm does preproceses pat[] and constructs an auxiliary
  =lps[]= of size m (same as size of pattern) which is used to skip
  characters while matching.
+ *name lps indicates longest proper prefix which is also suffix*.. A
  proper prefix is prefix with whole string not allowed. For example,
  prefixes of “ABC” are “”, “A”, “AB” and “ABC”. Proper
  prefixes are “”, “A” and “AB”. Suffixes of the string are
  “”, “C”, “BC” and “ABC”.
+ For each sub-pattern pat[0..i] where i = 0 to m-1, lps[i] stores
  length of the maximum matching proper prefix which is also a suffix
  of the sub-pattern pat[0..i].
  #+begin_src sh
   lps[i] = the longest proper prefix of pat[0..i] 
              which is also a suffix of pat[0..i]. 
  #+end_src


[[./Files/kmp_search.cc]]

#+INCLUDE: "./Files/kmp_search.cc" src c++
* Rabin-Karp Algorithm
Like the Naive Algorithm, Rabin-Karp algorithm also slides the pattern
one by one. But unlike the Naive algorithm, Rabin Karp algorithm
matches the hash value of the pattern with the hash value of current
substring of text, and if the hash values match then only it starts
matching individual characters. So Rabin Karp algorithm needs to
calculate hash values for following strings.

1) Pattern itself.
2) All the substrings of text of length m.

Rehashing is done using the following formula.
#+begin_src sh
hash( txt[s+1 .. s+m] ) = d ( hash( txt[s .. s+m-1]) – txt[s]*h ) + txt[s + m] ) mod q

hash( txt[s .. s+m-1] ) : Hash value at shift s.
hash( txt[s+1 .. s+m] ) : Hash value at next shift (or shift s+1)
d: Number of characters in the alphabet
q: A prime number
h: d^(m-1)
#+end_src

The average and best case running time of the Rabin-Karp algorithm is
*O(n+m)*, but its worst-case time is *O(nm)*. Worst case of Rabin-Karp
algorithm occurs when all characters of pattern and text are same as
the hash values of all the substrings of txt[] match with hash value
of pat[]. 

[[./Files/rabin-karp.cc]]

#+INCLUDE: "./Files/rabin-karp.cc" src c++
* Z algorithm
An element Z[i] of Z array stores length of the longest substring
starting from str[i] which is also a prefix of str[0..n-1]. 

#+begin_src sh
Examples:
str  = "aaaaaa"
Z[]  = {x, 5, 4, 3, 2, 1}

str = "aabaacd"
Z[] = {x, 1, 0, 2, 1, 0, 0}

str = "abababab"
Z[] = {x, 0, 6, 0, 4, 0, 2, 0}
#+end_src

The idea is to concatenate pattern and text, and create a string
“P$T” where P is pattern, $ is a special character should not be
present in pattern and text, and T is text. Build the Z array for
concatenated string. In Z array, if Z value at any point is equal to
pattern length, then pattern is present at that point.

We can construct Z array in linear time.
#+begin_src sh
The idea is to maintain an interval [L, R] which is the interval with max R
such that [L,R] is prefix substring (substring which is also prefix). 

Steps for maintaining this interval are as follows – 

1) If i > R then there is no prefix substring that starts before i and 
   ends after i, so we reset L and R and compute new [L,R] by comparing 
   str[0..] to str[i..] and get Z[i] (= R-L+1).

2) If i <= R then let K = i-L,  now Z[i] >= min(Z[K], R-i+1)  because 
   str[i..] matches with str[K..] for atleast R-i+1 characters (they are in
   [L,R] interval which we know is a prefix substring).     
   Now two sub cases arise – 
      a) If Z[K] < R-i+1  then there is no prefix substring starting at 
         str[i] (otherwise Z[K] would be larger)  so  Z[i] = Z[K]  and 
         interval [L,R] remains same.
      b) If Z[K] >= R-i+1 then it is possible to extend the [L,R] interval
         thus we will set L as i and start matching from str[R]  onwards  and
         get new R then we will update interval [L,R] and calculate Z[i] (=R-L+1).
#+end_src

[[./Files/z_algorithm.cc]]

#+INCLUDE: "./Files/z_algorithm.cc" src c++

* Aho-Corasick Algorithm for Pattern Searching[fn:1]
Given an input text and an array of k words, arr[], find all
occurrences of all words in the input text. Let n be the length of
text and m be the total number characters in all words, i.e. ~m =
length(arr[0]) + length(arr[1]) + .. + O(n + length(arr[k-1])~ . Here k
is total numbers of input words.

If we use a linear time searching algorithm like KMP,  time complexity
can be written as O(n*k + m).

*Aho-Corasick Algorithm* finds all words in O(n + m + z) time where z is
total number of occurrences of words in text. 

1. Prepocessing : Build an automaton of all words in arr[] The
   automaton has mainly three functions:
   #+begin_src sh
     Go To :   This function simply follows edges
               of Trie of all words in arr[]. It is
               represented as 2D array g[][] where
               we store next state for current state 
               and character.

     Failure : This function stores all edges that are
               followed when current character doesn't
               have edge in Trie.  It is represented as
               1D array f[] where we store next state for
               current state. 

     Output :  Stores indexes of all words that end at 
               current state. It is represented as 1D 
               array o[] where we store indexes
               of all matching words as a bitmap for 
               current state.
   #+end_src

2. Matching : Traverse the given text over built automaton to find all
   matching words.

*Preprocessing:*

Build a Tire and extend it into an automaton to support linear time
matching.

Example:
#+begin_src sh
Input: text = "ahishers"    
       arr[] = {"he", "she", "hers", "his"}

Output:
   Word his appears from 1 to 3
   Word he appears from 4 to 5
   Word she appears from 3 to 5
   Word hers appears from 4 to 7
#+end_src

[[./Files/aho-corasick1.png]]
[[./Files/aho-corasick2.png]]

[[./Files/aho-corasick_algorithm.cc]]

#+INCLUDE: "./Files/aho-corasick_algorithm.cc" src c++

* Longest Palindromic Substring
Given a string, find the longest substring which is palindrome.

+ if the given string is “forgeeksskeegfor”, the output should be
  “geeksskeeg”
+ if the given string is “abaaba”, the output should be “abaaba”
+ if the given string is “abababa”, the output should be “abababa”
+ if the given string is “abcbabcbabcba”, the output should be
  “abcbabcba”

http://www.leetcode.com/2011/11/longest-palindromic-substring-part-i.html

http://www.leetcode.com/2011/11/longest-palindromic-substring-part-ii.html


* Interpolation Search
Given a sorted array of n uniformly distributed values arr[], write a
function to search for a particular element x in the array.

To find the position to be searched, it uses following formula.
#+begin_src sh
// The idea of formula is to return higher value of pos
// when element to be searched is closer to arr[hi]. And
// smaller value when closer to arr[lo]
pos = lo + [ (x-arr[lo])*(hi-lo) / (arr[hi]-arr[Lo]) ]
#+end_src

Time Complexity : If elements are uniformly distributed, then O (log
log n)). In worst case it can take upto O(n).

[[./Files/interpolation_search.cc]]

#+INCLUDE: "./Files/interpolation_search.cc" src c++

* cc

+INCLUDE: "./Files/" src c++

#+begin_src c++

#+end_src


#+begin_src sh

#+end_src

* Footnotes

[fn:1] http://www.geeksforgeeks.org/aho-corasick-algorithm-pattern-searching/

