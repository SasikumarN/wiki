#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Searching and Sorting
#+OPTIONS: num:nil H:2

* KMP Algorithm
The KMP matching algorithm uses degenerating property (pattern having
same sub-patterns appearing more than once in the pattern) of the
pattern and improves the worst case complexity to O(n). The basic idea
behind KMP’s algorithm is: whenever we detect a mismatch (after some
matches), we already know some of the characters in the text of next
window. We take advantage of this information to avoid matching the
characters that we know will anyway match. 

*Preprocessing Overview:*
+ KMP algorithm does preproceses pat[] and constructs an auxiliary
  =lps[]= of size m (same as size of pattern) which is used to skip
  characters while matching.
+ *name lps indicates longest proper prefix which is also suffix*.. A
  proper prefix is prefix with whole string not allowed. For example,
  prefixes of “ABC” are “”, “A”, “AB” and “ABC”. Proper
  prefixes are “”, “A” and “AB”. Suffixes of the string are
  “”, “C”, “BC” and “ABC”.
+ For each sub-pattern pat[0..i] where i = 0 to m-1, lps[i] stores
  length of the maximum matching proper prefix which is also a suffix
  of the sub-pattern pat[0..i].
  #+begin_src sh
   lps[i] = the longest proper prefix of pat[0..i] 
              which is also a suffix of pat[0..i]. 
  #+end_src


[[./Files/kmp_search.cc]]

#+INCLUDE: "./Files/kmp_search.cc" src c++
* 

* cc

+INCLUDE: "./Files/" src c++

#+begin_src c++

#+end_src


#+begin_src sh

#+end_src
