#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Data Structures
#+OPTIONS: num:nil H:2



* Linked List
** Detect and Remove Loop in a Linked List
*** Method 1 (Check one by one) 
1. fast and slow pointers meet at a common point
2. art from the head of the Linked List and check for nodes one by one
   if they are reachable from common point
3.  When we find a node that is reachable, we know that this node is
    the starting node of the loop in Linked List and we can get
    pointer to the previous of this node.
*** Method 2 (Better Solution)
1) Detect Loop using Floyd’s Cycle detection algo and get the pointer
   to a loop node.
2) Count the number of nodes in loop. Let the count be k.
3) Fix one pointer to the head and another to kth node from head.
4) Move both pointers at the same pace, they will meet at loop
   starting node.
5) Get pointer to the last node of loop and make next of it as NULL.
*** Method 3 (Optimized Method 2: Without Counting Nodes in Loop)
We do not need to count number of nodes in Loop. After detecting the
loop, if we start slow pointer from head and move both slow and fast
pointers at same speed until fast don’t meet, they would meet at the
beginning of linked list.

#+begin_src sh
Distance traveled by fast pointer = 2 * (Distance traveled 
                                         by slow pointer)

(m + n*x + k) = 2*(m + n*y + k)

Note that before meeting the point shown above, fast
was moving at twice speed.

x -->  Number of complete cyclic rounds made by 
       fast pointer before they meet first time

y -->  Number of complete cyclic rounds made by 
       slow pointer before they meet first time
#+end_src
From above equation, we can conclude below
#+begin_src sh
m + k = (x-2y)*n

Which means m+k is a multiple of n. 
#+end_src
So if we start moving both pointers again at same speed such that one
pointer (say slow) begins from head node of linked list and other
pointer (say fast) begins from meeting point. When slow pointer
reaches beginning of linked list (has made m steps). Fast pointer
would have made also moved m steps as they are now moving same pace.
Since m+k is a multiple of n and fast starts from k, they would meet
at the beginning. 

#+begin_src c++
void detectAndRemoveLoop(Node *head)
{
    Node *slow = head;
    Node *fast = head->next;
 
    // Search for loop using slow and fast pointers
    while (fast && fast->next)
    {
        if (slow == fast)
            break;
        slow = slow->next;
        fast = fast->next->next;
    }
 
    /* If loop exists */
    if (slow == fast)
    {
        slow = head;
        while (slow != fast->next)
        {
            slow = slow->next;
            fast = fast->next;
        }
 
        /* since fast->next is the looping point */
        fast->next = NULL; /* remove loop */
    }
}
#+end_src
** t


* cc

#+begin_src c++

#+end_src


#+begin_src sh

#+end_src
