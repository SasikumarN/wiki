#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Tree
#+OPTIONS: num:nil H:2



* Maximum Path Sum in a Binary Tree
Given a binary tree, find the maximum path sum. The path may start and
end at any node in the tree.

For each node there can be four ways that the max path goes through the node:
1. Node only
2. Max path through Left Child + Node
3. Max path through Right Child + Node
4. Max path through Left Child + Node + Max path through Right Child

[[./Files/max_path_sum_in_tree.cc]]

#+INCLUDE: "./Files/max_path_sum_in_tree.cc" src c++

* if a given array can represent Preorder Traversal of Binary Search Tree
Given an array of numbers, return true if given array can represent
preorder traversal of a Binary Search Tree, else return false.
Expected time complexity is O(n).

A Simple Solution is to do following for every node pre[i] starting
from first one. Time Complexity of the above solution is O(n^2)

#+begin_src sh
1) Find the first greater value on right side of current node. 
   Let the index of this node be j. Return true if following 
   conditions hold. Else return false
    (i)  All values after the above found greater value are 
         greater than current node.
    (ii) Recursive calls for the subarrays pre[i+1..j-1] and 
         pre[j+1..n-1] also return true. 
#+end_src
An Efficient Solution can solve this problem in O(n) time. The idea is
to use a stack.

#+begin_src sh
1) Create an empty stack.
2) Initialize root as INT_MIN.
3) Do following for every element pre[i]
     a) If pre[i] is smaller than current root, return false.
     b) Keep removing elements from stack while pre[i] is greater
        then stack top. Make the last removed item as new root (to
        be compared next).
        At this point, pre[i] is greater than the removed root
        (That is why if we see a smaller element in step a), we 
        return false)
     c) push pre[i] to stack (All elements in stack are in decreasing
        order)
#+end_src

[[./Files/represent_preorder_tree.cc]]

#+INCLUDE: "./Files/represent_preorder_tree.cc" src c++

* 
* cc
+INCLUDE: "./Files/" src c++

#+begin_src c++

#+end_src


#+begin_src sh

#+end_src
