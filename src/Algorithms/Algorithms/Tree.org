#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Tree
#+OPTIONS: num:nil H:2


* Maximum Path Sum in a Binary Tree
Given a binary tree, find the maximum path sum. The path may start and
end at any node in the tree.

For each node there can be four ways that the max path goes through the node:
1. Node only
2. Max path through Left Child + Node
3. Max path through Right Child + Node
4. Max path through Left Child + Node + Max path through Right Child

[[./Files/max_path_sum_in_tree.cc]]

#+INCLUDE: "./Files/max_path_sum_in_tree.cc" src c++

* if a given array can represent Preorder Traversal of Binary Search Tree
Given an array of numbers, return true if given array can represent
preorder traversal of a Binary Search Tree, else return false.
Expected time complexity is O(n).

A Simple Solution is to do following for every node pre[i] starting
from first one. Time Complexity of the above solution is O(n^2)

#+begin_src sh
1) Find the first greater value on right side of current node. 
   Let the index of this node be j. Return true if following 
   conditions hold. Else return false
    (i)  All values after the above found greater value are 
         greater than current node.
    (ii) Recursive calls for the subarrays pre[i+1..j-1] and 
         pre[j+1..n-1] also return true. 
#+end_src
An Efficient Solution can solve this problem in O(n) time. The idea is
to use a stack.

#+begin_src sh
1) Create an empty stack.
2) Initialize root as INT_MIN.
3) Do following for every element pre[i]
     a) If pre[i] is smaller than current root, return false.
     b) Keep removing elements from stack while pre[i] is greater
        then stack top. Make the last removed item as new root (to
        be compared next).
        At this point, pre[i] is greater than the removed root
        (That is why if we see a smaller element in step a), we 
        return false)
     c) push pre[i] to stack (All elements in stack are in decreasing
        order)
#+end_src

[[./Files/represent_preorder_tree.cc]]

#+INCLUDE: "./Files/represent_preorder_tree.cc" src c++

* Interval Tree
Consider a situation where we have a set of intervals and we need
following operations to be implemented efficiently. 

1) Add an interval
2) Remove an interval
3) Given an interval x, find if x overlaps with any of the existing
   intervals.

Every node of Interval Tree stores following information.
1) i: An interval which is represented as a pair [low, high]
2) max: Maximum high value in subtree rooted with this node.
3) The low value of an interval is used as key to maintain order in
   BST. 

The main operation is to search for an overlapping interval. Following
is algorithm for searching an overlapping interval x in an Interval
tree rooted with root.
#+begin_src sh
Interval overlappingIntervalSearch(root, x)
1) If x overlaps with root's interval, return the root's interval.

2) If left child of root is not empty and the max  in left child 
is greater than x's low value, recur for left child

3) Else recur for right child.
#+end_src

[[./Files/interval_tree.cc]]

#+INCLUDE: "./Files/interval_tree.cc" src c++

* 
* cc
+INCLUDE: "./Files/" src c++

#+begin_src c++

#+end_src


#+begin_src sh

#+end_src
