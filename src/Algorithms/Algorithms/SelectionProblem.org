#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Selection Problem
#+OPTIONS: num:nil H:2



* Kth Smallest/Largest Element in Unsorted Array
Given an array and a number k where k is smaller than size of array,
we need to find the k’th smallest element in the given array. It is
given that array elements are distinct.

** Method 1 (Simple Solution) 
A Simple Solution is to sort the given array using a O(nlogn) sorting
algorithm like Merge Sort, Heap Sort, etc and return the element at
index k-1 in the sorted array. Time Complexity of this solution is
O(nLogn).

[[./Files/kth_smallest1.cc]]

#+INCLUDE: "./Files/kth_smallest1.cc" src c++
** Method 2 (Using Min Heap – HeapSelect)
We can find k’th smallest element in time complexity better than
O(nLogn). A simple optomization is to create a Min Heap of the given n
elements and call extractMin() k times. Time complexity of this
solution is O(n + kLogn).

[[./Files/kth_smallest2.cc]]

#+INCLUDE: "./Files/kth_smallest2.cc" src c++
** Method 3 (Using Max-Heap)
1) Build a Max-Heap MH of the first k elements (=arr[0]= to =arr[k-1]=) of
   the given array. O(k)

2) For each element, after the k’th element (=arr[k]= to =arr[n-1]=),
   compare it with root of MH.
Time complexity of this solution is O(k + (n-k)*Logk)

** Method 4 (QuickSelect) 
In QuickSort, we pick a pivot element, then move the pivot element to
its correct position and partition the array around it. The idea is,
not to do complete quicksort, but stop at the point where pivot itself
is k’th smallest element. Also, not to recur for both left and right
sides of pivot, but recur for one of them according to the position of
pivot. The worst case time complexity of this method is O(n2), but it
works in O(n) on average.

[[./Files/kth_smallest4.cc]]

#+INCLUDE: "./Files/kth_smallest4.cc" src c++

*** picks a random pivot element 
#+begin_src c++
  int randomPartition(int arr[], int l, int r)
  {
      int n = r-l+1;
      int pivot = rand() % n;
      swap(&arr[l + pivot], &arr[r]);
      return partition(arr, l, r);
  }
#+end_src
** Method 5 (Divide, Sort and find)
#+begin_src sh
kthSmallest(arr[0..n-1], k)

1) Divide arr[] into ⌈n/5⌉ ceil; groups where size of each group is 5 
   except possibly the last group which may have less  than 5 elements.  

2) Sort the above created ⌈n/5⌉ groups and find median 
   of all groups. Create an auxiliary array 'median[]' and store medians 
   of all ⌈n/5⌉ groups in this median array.

// Recursively call this method to find median of median[0..⌈n/5⌉-1]
3) medOfMed = kthSmallest(median[0..⌈n/5⌉-1], ⌈n/10⌉)

4) Partition arr[] around medOfMed and obtain its position.
     pos = partition(arr, n, medOfMed)

5) If pos == k return medOfMed 
6) If pos < k return kthSmallest(arr[l..pos-1], k) 
7) If poa > k return kthSmallest(arr[pos+1..r], k-pos+l-1)
#+end_src

More: [[http://www.geeksforgeeks.org/kth-smallestlargest-element-unsorted-array-set-3-worst-case-linear-time/][Worst Case Linear Time]]

[[./Files/kth_smallest5.cc]]

#+INCLUDE: "./Files/kth_smallest5.cc" src c++
* kth Smallest Element in the Union of Two Sorted Arrays
[[./Files/kth_smallest_arrays.cc]]

#+INCLUDE: "./Files/kth_smallest_arrays.cc" src c++


[[./Files/kth_smallest_arrays2.cc]]

#+INCLUDE: "./Files/kth_smallest_arrays2.cc" src c++

** More
+ [[http://stackoverflow.com/questions/4607945/how-to-find-the-kth-smallest-element-in-the-union-of-two-sorted-arrays][find the kth smallest element in the union of two sorted arrays]]
+ [[http://stackoverflow.com/questions/12555793/finding-the-kth-smallest-element-in-union-of-sorted-arrays][a algorithm in python]]

* Median of two sorted arrays
This method works by first getting medians of the two sorted arrays
and then comparing them.

Time Complexity: O(logn)

#+begin_src sh
1) Calculate the medians m1 and m2 of the input arrays ar1[] 
   and ar2[] respectively.
2) If m1 and m2 both are equal then we are done.
     return m1 (or m2)
3) If m1 is greater than m2, then median is present in one 
   of the below two subarrays.
    a)  From first element of ar1 to m1 (ar1[0...|_n/2_|])
    b)  From m2 to last element of ar2  (ar2[|_n/2_|...n-1])
4) If m2 is greater than m1, then median is present in one    
   of the below two subarrays.
   a)  From m1 to last element of ar1  (ar1[|_n/2_|...n-1])
   b)  From first element of ar2 to m2 (ar2[0...|_n/2_|])
5) Repeat the above process until size of both the subarrays 
   becomes 2.
6) If size of the two arrays is 2 then use below formula to get 
  the median.
    Median = (max(ar1[0], ar2[0]) + min(ar1[1], ar2[1]))/2
#+end_src

[[./Files/med_two_sorted_arrays.cc]]

#+INCLUDE: "./Files/med_two_sorted_arrays.cc" src c++

* Median of two sorted arrays of different sizes
Let the two arrays be A[N] and B[M]. In the following explanation, it
is assumed that N is smaller than or equal to M.

Base cases:
#+begin_src sh
The smaller array has only one element
Case 0: N = 0, M = 2
Case 1: N = 1, M = 1.
Case 2: N = 1, M is odd
Case 3: N = 1, M is even
The smaller array has only two elements
Case 4: N = 2, M = 2
Case 5: N = 2, M is odd
Case 6: N = 2, M is even
#+end_src

#+begin_src sh
Case 0: There are no elements in first array, return median of second array. If second array is also empty, return -1.

Case 1: There is only one element in both arrays, so output the average of A[0] and B[0].

Case 2: N = 1, M is odd
Let B[5] = {5, 10, 12, 15, 20}
First find the middle element of B[], which is 12 for above array. There are following 4 sub-cases.
…2.1 If A[0] is smaller than 10, the median is average of 10 and 12.
…2.2 If A[0] lies between 10 and 12, the median is average of A[0] and 12.
…2.3 If A[0] lies between 12 and 15, the median is average of 12 and A[0].
…2.4 If A[0] is greater than 15, the median is average of 12 and 15.
In all the sub-cases, we find that 12 is fixed. So, we need to find the median of B[ M / 2 – 1 ], B[ M / 2 + 1], A[ 0 ] and take its average with B[ M / 2 ].

Case 3: N = 1, M is even
Let B[4] = {5, 10, 12, 15}
First find the middle items in B[], which are 10 and 12 in above example. There are following 3 sub-cases.
…3.1 If A[0] is smaller than 10, the median is 10.
…3.2 If A[0] lies between 10 and 12, the median is A[0].
…3.3 If A[0] is greater than 12, the median is 12.
So, in this case, find the median of three elements B[ M / 2 – 1 ], B[ M / 2] and A[ 0 ].

Case 4: N = 2, M = 2
There are four elements in total. So we find the median of 4 elements.

Case 5: N = 2, M is odd
Let B[5] = {5, 10, 12, 15, 20}
The median is given by median of following three elements: B[M/2], max(A[0], B[M/2 – 1]), min(A[1], B[M/2 + 1]).

Case 6: N = 2, M is even
Let B[4] = {5, 10, 12, 15}
The median is given by median of following four elements: B[M/2], B[M/2 – 1], max(A[0], B[M/2 – 2]), min(A[1], B[M/2 + 1])
#+end_src

[[./Files/med_two_sorted_arrays_diff.cc]]

#+INCLUDE: "./Files/med_two_sorted_arrays_diff.cc" src c++

* Random Selection 
算法平均时间复杂度： O(n) 。

#+begin_src c++
unsigned int seed = time(NULL);
int randint(int m, int n) {
  return m + rand_r(&seed) / (RAND_MAX / (n + 1 - m) + 1);
}

void RandomSelectionK(int *array, int l, int u, int k) {
  if (l >= u) {
    return;
  }
  swap(array[l], array[randint(l, u)]);
  int pivot = array[l];
  int i = l;
  int j = u + 1;
  while (true) {
    do {
      ++i;
    } while (i <= u && array[i] < pivot);
    do {
      --j;
    } while (array[j] > pivot);
    if (i > j) {
      break;
    }
    swap(array[i], array[j]);
  }
  swap(array[l], array[j]);
  if (j < k) {
    RandomSelectionK(array, j + 1, u, k);
  } else if (j > k) {
    RandomSelectionK(array, l, j - 1, k);
  }
}
#+end_src
* BFPRT[fn:1]
在乱序数组中找寻中间元素，算法复杂度O(n).

算法刊登在[[http://people.csail.mit.edu/rivest/pubs/BFPRT73.pdf][Blum et al. (Tarjan)]]。经常称为BFPRT，以论文作者最后名字这和
组合而来。

#+begin_src c++
#include <algorithm>
using std::swap;

void BubbleSort(int *array, int left, int right) {
  int bound = right;
  while (1) {
    int tmp = 0;
    for (int i = left; i <= right; ++i) {
      if (array[i] > array[i + 1]) {
        swap(array[i], array[i + 1]);
        tmp = i;
      }
    }
    if (tmp == 0) {
      break;
    }
    bound = tmp;
  }
}
  
int FindMedian(int *array, int left, int right) {
  const int kGroupSize = 5;
  int size = right - left + 1;
  if (size <= kGroupSize) {
    BubbleSort(array, left, right);
    return array[(size - 1) / 2 + 1];
  }
  int num_group = (size - kGroupSize + 1) / kGroupSize;
  for (int i = 0; i < num_group; ++i) {
    int sub_left = left + kGroupSize * i;
    int sub_right = sub_left + kGroupSize - 1;
    if (sub_right > right) {
      sub_right = right;
    }
    BubbleSort(array, sub_left, sub_right);
    swap(array[left + i], array[(right + left - 1) / 2 + 1]);
  }
  return FindMedian(array, left, left + num_group - 1);
}
#+end_src
* Tournament Algorithm
** Find the second-largest element 
算法复杂度O(n+logn);
** Find the k-largest element
算法复杂度O(n+klogn);
* cc
#+begin_src sh

#+end_src

+INCLUDE: "./Files/" src c++

* Footnotes

[fn:1] http://en.wikipedia.org/wiki/Median_of_medians

