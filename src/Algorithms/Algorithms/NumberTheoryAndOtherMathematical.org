#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Number theory and Other Mathematical
#+OPTIONS: num:nil H:2



* Primality Test
** Optimized
1. Instead of checking till n, we can check till √n because a larger
   factor of n must be a multiple of smaller factor that has been
   already checked
2. The algorithm can be improved further by observing that all primes
   are of the form 6k ± 1, with the exception of 2 and 3. This is
   because all integers can be expressed as (6k + i) for some integer
   k and for i = -1, 0, 1, 2, 3, or 4; 2 divides (6k + 0), (6k + 2),
   (6k + 4); and 3 divides (6k + 3). So a more efficient method is to
   test if n is divisible by 2 or 3, then to check through all the
   numbers of form 6k ± 1.

#+begin_src c++
bool isPrime(int n) {
  if (n <= 1)  return false;
  if (n <= 3)  return true;
 
  if (n%2 == 0 || n%3 == 0) return false;
  for (int i = 5; i*i <= n; i = i+6) { 
    if (n%i == 0 || n%(i+2) == 0) {
      return false;
    }
  }
  return true;
}
#+end_src
** Fermat’s method
This method is a probabilistic method and is based on below [[https://en.wikipedia.org/wiki/Fermat's_little_theorem][Fermat’s
Little Theorem]].

#+begin_src sh
Fermat's Little Theorem:
If n is a prime number, then for every a, 1 <= a < n,

an-1 ≡ 1 (mod n)
 OR 
an-1 % n = 1 
 

Example: Since 5 is prime, 24 ≡ 1 (mod 5) [or 24%5 = 1],
         34 ≡ 1 (mod 5) and 44 ≡ 1 (mod 5) 

         Since 7 is prime, 26 ≡ 1 (mod 7),
         36 ≡ 1 (mod 7), 46 ≡ 1 (mod 7) 
         56 ≡ 1 (mod 7) and 66 ≡ 1 (mod 7) 
#+end_src

If a given number is prime, then this method always returns true. If
given number is composite (or non-prime), then it may return true or
false, but the probability of producing incorrect result for composite
is low and can be reduced by doing more iterations.

[[./Files/fermat_is_prime.cc]]

#+INCLUDE: "./Files/fermat_is_prime.cc" src c++
** Miller–Rabin[fn:1]
This method is a probabilistic method (Like Fermat), but it generally
preferred over Fermat’s method.
#+begin_src sh
// It returns false if n is composite and returns true if n
// is probably prime.  k is an input parameter that determines
// accuracy level. Higher value of k indicates more accuracy.
bool isPrime(int n, int k)
1) Handle base cases for n < 3
2) If n is even, return false.
3) Find an odd number d such that n-1 can be written as d*2r. 
   Note that since, n is odd (n-1) must be even and r must be 
   greater than 0.
4) Do following k times
     if (millerTest(n, d) == false)
          return false
5) Return true.

// This function is called for all k trials. It returns 
// false if n is composite and returns false if n is probably
// prime.  
// d is an odd number such that  d*2r = n-1 for some r >= 1
bool millerTest(int n, int d)
1) Pick a random number 'a' in range [2, n-2]
2) Compute: x = pow(a, d) % n
3) If x == 1 or x == n-1, return true.

// Below loop mainly runs 'r-1' times.
4) Do following while d doesn't become n-1.
     a) x = (x*x) % n.
     b) If (x == 1) return false.
     c) If (x == n-1) return true. 
#+end_src

Example:
#+begin_src sh
Input: n = 13,  k = 2.

1) Compute d and r such that d*2r = n-1, 
     d = 3, r = 2. 
2) Call millerTest k times.

1st Iteration:
1) Pick a random number 'a' in range [2, n-2]
      Suppose a = 4

2) Compute: x = pow(a, d) % n
     x = 43 % 13 = 12

3) Since x = (n-1), return true.

IInd Iteration:
1) Pick a random number 'a' in range [2, n-2]
      Suppose a = 5

2) Compute: x = pow(a, d) % n
     x = 53 % 13 = 8

3) x neither 1 nor 12.

4) Do following (r-1) = 1 times
   a) x = (x * x) % 13 = (8 * 8) % 13 = 12
   b) Since x = (n-1), return true.

Since both iterations return true, we return true.
#+end_src

[[./Files/miller-rabin_prime.cc]]

#+INCLUDE: "./Files/miller-rabin_prime.cc" src c++

* Sieve of Eratosthenes
Following is the algorithm to find all the prime numbers less than or equal to a given integer n by Eratosthenes’ method:

1. Create a list of consecutive integers from 2 to n: (2, 3, 4, …,
   n).
2. Initially, let p equal 2, the first prime number.
3. Starting from p, count up in increments of p and mark each of these
   numbers greater than p itself in the list. These numbers will be
   2p, 3p, 4p, etc.; note that some of them may have already been
   marked.

4. Find the first number greater than p in the list that is not
   marked. If there was no such number, stop. Otherwise, let p now
   equal this number (which is the next prime), and repeat from
   step 3.

[[./Files/sieve_of_eratosthenes.cc]]

#+INCLUDE: "./Files/sieve_of_eratosthenes.cc" src c++
* Wilson’s Theorem
Wilson’s theorem states that a natural number p > 1 is a prime number
if and only if

$(n-1)!\ \equiv\ -1 \pmod n$ .

但是由于阶乘是呈爆炸增长的，其结论对于实际操作意义不大。

* Pollard’s Rho Algorithm for Prime Factorization[fn:2]
Given a positive integer n, and that it is composite, find a divisor
of it.

*Simple approach*: Test all integers less than √n

A large enough number will still mean a great deal of work. Pollard’s
Rho is a prime factorization algorithm, particularly fast for a large
composite number with small prime factors. The Rho algorithm’s most
remarkable success was the factorization of eighth Fermat number:
1238926361552897 * 93461639715357977769163558199606896584051237541638188580280321.

*Algorithm:*

1. Start with random x and c. Take y equal to x and f(x) = x2 + c.
2. While a divisor isn’t obtained
   + Update x to f(x) (modulo n) [Tortoise Move]
   + Update y to f(f(y)) (modulo n) [Hare Move]
   + Calculate GCD of |x-y| and n
   + If GCD is not unity
     + If GCD is n, repeat from step 2 with another set of x, y and c
     + Else GCD is our answer

[[./Files/pollard_rho.cc]]

#+INCLUDE: "./Files/pollard_rho.cc" src c++
* Basic and Extended Euclidean algorithms
#+begin_src c++
  int gcd(int a, int b) {
    if (a == 0)
      return b;
    return gcd(b % a, a);
  }
#+end_src
** Extended Euclidean Algorithm
Extended Euclidean algorithm also finds integer coefficients x and y
such that:

#+begin_src sh
  ax + by = gcd(a, b)
#+end_src

#+begin_src sh
As seen above, x and y are results for inputs a and b,
   a.x + b.y = gcd                      ----(1)  

And x1 and y1 are results for inputs b%a and a
   (b%a).x1 + a.y1 = gcd   
                    
When we put b%a = (b - (⌊b/a⌋).a) in above, 
we get following. Note that ⌊b/a⌋ is floor(a/b)

   (b - (⌊b/a⌋).a).x1 + a.y1  = gcd

Above equation can also be written as below
   b.x1 + a.(y1 - (⌊b/a⌋).x1) = gcd      ---(2)

After comparing coefficients of 'a' and 'b' in (1) and 
(2), we get following
   x = y1 - ⌊b/a⌋ * x1
   y = x1
#+end_src

[[./Files/gcd_extended.cc]]

#+INCLUDE: "./Files/gcd_extended.cc" src c++

* Modular multiplicative inverse
Given two integers ‘a’ and ‘m’, find modular multiplicative
inverse of ‘a’ under modulo ‘m’.

The modular multiplicative inverse is an integer ‘x’ such that.
#+begin_src sh
 a x ≡ 1 (mod m)
#+end_src
The value of x should be in {0, 1, 2, … m-1},

The multiplicative inverse of “a modulo m” exists if and only if a
and m are relatively prime (i.e., if gcd(a, m) = 1).

** Works when m and a are coprime
The idea is to use Extended Euclidean algorithms that takes two
integers ‘a’ and ‘b’, finds their gcd and also find ‘x’ and
‘y’ such that
#+begin_src sh
 ax + by = gcd(a, b) 
#+end_src

To find multiplicative inverse of ‘a’ under ‘m’, we put b = m in
above formula. Since we know that a and m are relatively prime, we can
put value of gcd as 1.
#+begin_src sh
 ax + my = 1 
#+end_src

If we take modulo m on both sides, we get
#+begin_src sh
 ax + my ≡ 1 (mod m)
#+end_src

We can remove the second term on left side as ‘my (mod m)’ would
always be 0 for an integer y.
#+begin_src sh
 ax + my ≡ 1 (mod m)
 ax  ≡ 1 (mod m) 
#+end_src

So the ‘x’ that we can find using Extended Euclid Algorithm is
multiplicative inverse of ‘a’

[[./Files/mod_inverse.cc]]

#+INCLUDE: "./Files/mod_inverse.cc" src c++

*Iterative Implementation:*

[[./Files/mode_inverse_iterative.cc]]

#+INCLUDE: "./Files/mode_inverse_iterative.cc" src c++

** Works when m is prime
If we know m is prime, then we can also use Fermats’s little theorem
to find the inverse.

\begin{equation}
\begin{align}
a^m-1 ≡ 1 (\mbox{mod } m) 
\end{align}
\end{equation}

If we multiply both sides with a-1 and switch the order, we get

\begin{equation}
\begin{align}
a^{-1} ≡ a^m-2 (\mbox{mod } m) 
\end{align}
\end{equation}

Time Complexity of this method is O(Log m)

[[./Files/mod_inverse1.cc]]

#+INCLUDE: "./Files/mod_inverse1.cc" src c++

* Euler’s Totient Function[fn:3][fn:4][fn:5]
Euler’s Totient function Φ(n) for an input n is count of numbers in
{1, 2, 3, …, n} that are relatively prime to n, 

The idea is based on Euler’s product formula which states that value
of totient functions is below product over all prime factors p of n.

[[./Files/eulersproduct.png]]

[[./Files/eduler_totient.cc]]

#+INCLUDE: "./Files/eduler_totient.cc" src c++

* Chinese Remainder Theorem
We are given two arrays num[0..k-1] and rem[0..k-1]. In num[0..k-1],
every pair is coprime (gcd for every pair is 1). We need to find
minimum positive number x such that:
#+begin_src sh
     x % num[0]    =  rem[0], 
     x % num[1]    =  rem[1], 
     .......................
     x % num[k-1]  =  rem[k-1] 
#+end_src

Chinise Remainder Theorem states that there always exists an x that
satisfies given congruences.[fn:6]

A *Naive Approach* to find x is to start with 1 and one by one increment
it and check if dividing it with given elements in num[] produces
corresponding remainders in rem[]. Once we find such a x, we return
it.

An efficient solution is based on below formula.
#+begin_src sh
x =  ( ∑ (rem[i]*pp[i]*inv[i]) ) % prod
   Where 0 <= i <= n-1

rem[i] is given array of remainders

prod is product of all given numbers
prod = num[0] * num[1] * ... * num[k-1]

pp[i] is product of all but num[i]
pp[i] = prod / num[i]

inv[i] = Modular Multiplicative Inverse of 
         pp[i] with respect to num[i]
#+end_src

[[./Files/chinese_remainder.cc]]

#+INCLUDE: "./Files/chinese_remainder.cc" src c++
* Compute nCr % p
Given three numbers n, r and p, compute value of nCr mod p.
Example:
#+begin_src sh
Input:  n = 10, r = 2, p = 13
Output: 6
Explanation: 10C2 is 45 and 45 % 13 is 6.
#+end_src

** Dynamic Programming
The idea is to compute nCr using below formula:
#+begin_src sh
   C(n, r) = C(n-1, r-1) + C(n-1, r)
   C(n, 0) = C(n, n) = 1
#+end_src
Time complexity of above solution is O(n*r) and it requires O(n)
space.

[[./Files/ncr_dynamic.cc]]

#+INCLUDE: "./Files/ncr_dynamic.cc" src c++

** Lucas Theorem
Lucas Theorem:
[[./Files/lucas-theorem.png]]

*Time Complexity*: Time complexity of this solution is O(p^2 * Logp n).
There are O(Logp n) digits in base p representation of n. Each of
these digits is smaller than p, therefore, computations for individual
digits take O(p^2). 

[[./Files/ncr_lucas.cc]]

#+INCLUDE: "./Files/ncr_lucas.cc" src c++

* 不用除法和求模运算，判断一个数能否被3整除
** method1
这个数的每一个位上的数字加起来后，和为3的倍数。 
每个位相加，然后不断减去3,看结果是不是等于0
#+begin_src c
bool parse(unsigned int n)
{
    char buffer[1024];
    int i,length;
    int sum = 0;
    if(n < 10)
    {
        if(n == 0 || n == 3 || n == 6 || n == 9)
            return true;
        else
            return false;
    }
    sprintf(buffer,"%d",n);
    length = strlen(buffer);
    for(i = 0; i != length; i++)
        sum += buffer[i] - '0';
    return parse(sum);
}
#+end_src

** method2
3 = 0B11
如果a能被3整除，a=b×3,则a的最低位和b的最低位相同，a的次低位=b的次低位
+b的最低位，所以b的次低位=a的次低位-b的最低位，以此求出b。若不能则a不
能被3整出

#+begin_src c
        bool divideby3(int n)
        {
          int temp;
          if(n < 0)
            n = -n;
          while(n > 0){
            temp = n & 1;
            n >>= 1;
            n = n - temp;
          }
          return (n == 0);
        }
#+end_src

* BIT Manipulation
** Find the maximum subarray XOR in a given array
An Efficient Solution can solve the above problem in O(n) time under
the assumption that integers take fixed number of bits to store. The
idea is to use Trie Data Structure. Below is algorithm.

#+begin_src sh
1) Create an empty Trie.  Every node of Trie is going to 
   contain two children, for 0 and 1 value of bit.
2) Initialize pre_xor = 0 and insert into the Trie.
3) Initialize result = minus infinite
4) Traverse the given array and do following for every 
   array element arr[i].
       a) pre_xor  = pre_xor  ^ arr[i]
          pre_xor now contains xor of elements from 
          arr[0] to arr[i].
       b) Query the maximum xor value ending with arr[i] 
          from Trie.
       c) Update result if the value obtained in step 
          4.b is more than current value of result.
#+end_src
Let f(i,j) be the xor of the subarray from i to j ,then we have to
maximise f(i,j).
As f(i,j) = f(1,j) xor f(1,i-1) = curr_prefix xor f(1,i-1).
Where f(1,i-1) is the prefix to be removed.

[[./Files/find_max_xor.cc]]

#+INCLUDE: "./Files/find_max_xor.cc" src c++

** Find nth Magic Number
A magic number is defined as a number which can be expressed as a
power of 5 or sum of unique powers of 5. First few magic numbers are
5, 25, 30(5 + 25), 125, 130(125 + 5), ….

If we notice carefully the magic numbers can be represented as 001,
010, 011, 100, 101, 110 etc, where 001 is 0*pow(5,3) + 0*pow(5,2) +
1*pow(5,1). So basically we need to add powers of 5 for each bit set
in given integer n.

[[./Files/nth_magic.cc]]

#+INCLUDE: "./Files/nth_magic.cc" src c++

** Sum of bit differences among all pairs
Given an integer array of n integers, find sum of bit differences in
all pairs that can be formed from array elements. Bit difference of a
pair (x, y) is count of different bits at same positions in binary
representations of x and y.  For example, bit difference for 2 and 7
is 2.

Examples:
#+begin_src sh
Input:  arr[] = {1, 3, 5}
Output: 8
All pairs in array are (1, 1), (1, 3), (1, 5)
                       (3, 1), (3, 3) (3, 5),
                       (5, 1), (5, 3), (5, 5)
Sum of bit differences =  0 + 1 + 1 +
                          1 + 0 + 2 +
                          1 + 2 + 0 
                       = 8
#+end_src
An Efficient Solution can solve this problem in O(n) time using the
fact that all numbers are represented using 32 bits (or some fixed
number of bits). The idea is to count differences at individual bit
positions. 

[[./Files/bit_differences.cc]]

#+INCLUDE: "./Files/bit_differences.cc" src c++
** Find the element that appears once
Given an array where every element occurs three times, except one
element which occurs only once. Find the element that occurs once.
Expected time complexity is O(n) and O(1) extra space.

Examples:
#+begin_src sh
Input: arr[] = {12, 1, 12, 3, 12, 1, 1, 2, 3, 3}
Output: 2
#+end_src

Run a loop for all elements in array. At the end of every iteration,
maintain following two values.
+ ones: The bits that have appeared 1st time or 4th time or 7th time
  .. etc.
+ twos: The bits that have appeared 2nd time or 5th time or 8th time
  .. etc.

Both ‘ones’ and ‘twos’ contain those extra bits which appear 3rd
time. Remove these extra bits by finding out common set bits in
‘ones’ and ‘twos’.

[[./Files/find_appears_once.cc]]
#+INCLUDE: "./Files/find_appears_once.cc" src c++
** Count total set bits in all numbers from 1 to n
Given a positive integer n, count the total number of set bits in
binary representation of all numbers from 1 to n.

If the input number is of the form 2^b -1 e.g., 1,3,7,15.. etc, the
number of set bits is b * 2^(b-1). This is because for all the numbers
0 to (2^b)-1, if you complement and flip the list you end up with the
same list (half the bits are on, half off).

2^b - 1 has b bits, b * 2^b / 2 = b * 2^(b-1) include 0.


[[./Files/count_total_set_bits.cc]]

#+INCLUDE: "./Files/count_total_set_bits.cc" src c++
** 




* cc
#+begin_src sh

#+end_src

+INCLUDE: "./Files/" src c++

* Footnotes

[fn:1] http://www.geeksforgeeks.org/primality-test-set-3-miller-rabin/

[fn:2] http://www.geeksforgeeks.org/pollards-rho-algorithm-prime-factorization/

[fn:3] http://www.geeksforgeeks.org/eulers-totient-function/

[fn:4] https://en.wikipedia.org/wiki/Euler%27s_totient_function

[fn:5] http://e-maxx.ru/algo/euler_function

[fn:6] https://en.wikipedia.org/wiki/Chinese_remainder_theorem

