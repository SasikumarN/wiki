#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Dynamic Programming
#+OPTIONS: num:nil H:2


* Overview[fn:1]
dynamic programming is a method for solving complex problems by
breaking them down into simpler subproblems. It is applicable to
problems exhibiting the properties of overlapping subproblems and
optimal substructure

* Egg Dropping Puzzle[fn:2]
When we drop an egg from a floor x, there can be two cases (1) The egg
breaks (2) The egg doesn’t break.

1) If the egg breaks after dropping from xth floor, then we only need
   to check for floors lower than x with remaining eggs; so the
   problem reduces to x-1 floors and n-1 eggs

2) If the egg doesn’t break after dropping from the xth floor, then
   we only need to check for floors higher than x; so the problem
   reduces to k-x floors and n eggs.

Since we need to minimize the number of trials in worst case, we take
the maximum of two cases. We consider the max of above two cases for
every floor and choose the floor which yields minimum number of
trials.

#+begin_src sh
 k ==> Number of floors
  n ==> Number of Eggs
  eggDrop(n, k) ==> Minimum number of trails needed to find the critical
                    floor in worst case.
  eggDrop(n, k) = 1 + min{max(eggDrop(n - 1, x - 1), eggDrop(n, k - x)): 
                 x in {1, 2, ..., k}}
#+end_src

#+begin_src c
#include <stdio.h>
#include <limits.h>

int max(int a, int b) {return (a > b)? a : b;}

int eggDrop(int n, int k)
{
  /* store the minimum number of trials needed for i eggs and j floors */
  int eggdrop[n+1][k+1];
  int res;
  int i, j, x;

  /* need j trails for 1 egg and j floors */
  for(j = 0; j <= k; ++j)
    eggdrop[1][j] = j;
  /* need 1 trails for i egg and 1 floor
     need 0 trials for i egg and 0 floor*/
  for(i = 0; i <= n; ++i){
    eggdrop[i][1] = 1;
    eggdrop[i][0] = 0;
  }

  for(i = 2; i <= n; ++i){
    for(j = 2; j <= k; ++j){
      eggdrop[i][j] = INT_MAX;
      for(x = 1; x <= j; ++x){
        int res = 1 + max(eggdrop[i][j - x], eggdrop[i - 1][x - 1]);
        if(res < eggdrop[i][j])
          eggdrop[i][j] = res;
      }
    }
  }
  return eggdrop[n][k];
}

int main(int argc, char *argv[])
{
  int n = 2, k = 36;
   printf ("\nMinimum number of trials in worst case with %d eggs and "
             "%d floors is %d \n", n, k, eggDrop(n, k));
   return 0;
}
#+end_src

* Longest Common Subsequence
LCS Problem Statement: Given two sequences, find the length of longest
subsequence present in both of them. A subsequence is a sequence that
appears in the same relative order, but not necessarily contiguous.

[[./Files/longest_common_subsequence.cc]]

#+INCLUDE: "./Files/longest_common_subsequence.cc" src c++
* Longest Increasing Subsequence
The Longest Increasing Subsequence (LIS) problem is to find the length
of the longest subsequence of a given sequence such that all elements
of the subsequence are sorted in increasing order. For example, the
length of LIS for {10, 22, 9, 33, 21, 50, 41, 60, 80} is 6 and LIS is
{10, 22, 33, 50, 60, 80}.

[[./Files/longest_increasing_subsequence.cc]]

#+INCLUDE: "./Files/longest_increasing_subsequence.cc" src c++

* Edit Distance
Given two strings str1 and str2 and below operations that can
performed on str1. Find minimum number of edits (operations) required
to convert ‘str1’ into ‘str2’.
+ Insert
+ Remove
+ Replace

[[./Files/edit_distance.cc]]

#+INCLUDE: "./Files/edit_distance.cc" src c++

* Partition a set into two subsets such that the difference of subset sums is minimum
Given a set of integers, the task is to divide it into two sets S1 and
S2 such that the absolute difference between their sums is minimum.

If there is a set S with n elements, then if we assume Subset1 has m
elements, Subset2 must have n-m elements and the value of
abs(sum(Subset1) – sum(Subset2)) should be minimum.

[[./Files/partition_a_set.cc]]

#+INCLUDE: "./Files/partition_a_set.cc" src c++
* Count number of ways to cover a distance
Given a distance ‘dist, count total number of ways to cover the
distance with 1, 2 and 3 steps.

#+begin_src sh
Input:  n = 3
Output: 4
Below are the four ways
 1 step + 1 step + 1 step
 1 step + 2 step
 2 step + 1 step
 3 step

Input:  n = 4
Output: 7
#+end_src

[[./Files/count_num_ways.cc]]

#+INCLUDE: "./Files/count_num_ways.cc" src c++
* Find the longest path in a matrix
Given a n*n matrix where numbers all numbers are distinct and are
distributed from range 1 to n2, find the maximum length path (starting
from any cell) such that all cells along the path are increasing order
with a difference of 1.

We can move in 4 directions from a given cell (i, j), i.e., we can
move to (i+1, j) or (i, j+1) or (i-1, j) or (i, j-1) with the
condition that the adjacent.

[[./Files/find_longest_path.cc]]

#+INCLUDE: "./Files/find_longest_path.cc" src c++
* Subset Sum Problem
Given a set of non-negative integers, and a value sum, determine if
there is a subset of the given set with sum equal to given sum.

#+begin_src sh
Examples: set[] = {3, 34, 4, 12, 5, 2}, sum = 9
Output:  True  //There is a subset (4, 5) with sum 9.
#+end_src

[[./Files/subset_sum.cc]]

#+INCLUDE: "./Files/subset_sum.cc" src c++

* Optimal Strategy for a Game
Problem statement: Consider a row of n coins of values v1 . . . vn,
where n is even. We play a game against an opponent by alternating
turns. In each turn, a player selects either the first or last coin
from the row, removes it from the row permanently, and receives the
value of the coin. Determine the maximum possible amount of money we
can definitely win if we move first.

#+begin_src sh
F(i, j)  represents the maximum value the user can collect from 
         i'th coin to j'th coin.

    F(i, j)  = Max(Vi + min(F(i+2, j), F(i+1, j-1) ), 
                   Vj + min(F(i+1, j-1), F(i, j-2) )) 
Base Cases
    F(i, j)  = Vi           If j == i
    F(i, j)  = max(Vi, Vj)  If j == i+1
#+end_src




* 0-1 Knapsack Problem


* cc
#+begin_src sh

#+end_src


* Footnotes

[fn:1] http://en.wikipedia.org/wiki/Dynamic_programming#Egg_dropping_puzzle

[fn:2] http://en.wikipedia.org/wiki/Dynamic_programming#Egg_dropping_puzzle


