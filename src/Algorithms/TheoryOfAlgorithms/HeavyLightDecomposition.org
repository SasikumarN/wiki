#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Heavy Light Decomposition
#+OPTIONS: num:nil H:2


* Overview
The heavy-light (H-L) decomposition of a rooted tree is a method of
partitioning of the vertices of the tree into disjoint paths (all
vertices have degree two, except the endpoints of a path, with degree
one) that gives important asymptotic time bounds for certain problems
involving trees.[fn:1]

** Basic idea of the algorithm
+ divide the tree into vertex-disjoint path (no two paths have a node
  in common)
+ in another words, the path from *any node* to *root* can be broken
  into pieces, and there are no more than $logN$ pieces
+ use [[http://wiki.dreamrunner.org/public_html/Algorithms/TheoryOfAlgorithms/SegmentTree.html][Segment tree]]/other data structures deal with the different
  paths, it can be up to $O(logN)$ complexity
+ any node A to any node B can be broken into two paths: A to LCA(A,B)
  and LCA(A,B) to B. Details about LCA(Lowest common ancestor): [[https://en.wikipedia.org/wiki/Lowest_common_ancestor][wiki]], [[http://wcipeg.com/wiki/Lowest_common_ancestor][wcipeg wiki]]
  and [[https://www.topcoder.com/community/data-science/data-science-tutorials/range-minimum-query-and-lowest-common-ancestor/][Range Minimum Query and Lowest Common Ancestor]]
+ the whole complexity: $O(log^2 N)$

** Application
+ The maximum number of the path between the two vertices
+ The sum of the numbers in the path between two vertices
+ Repainting edges path between two vertices
+ and more
* Examples
** maximum edge weight on the path from node a to node b[fn:4]
You are given a tree (an acyclic undirected connected graph) with N
nodes, and edges numbered 1, 2, 3...N-1.
We will ask you to perfrom some instructions of the following form:
+ CHANGE i ti : change the cost of the i-th edge to ti
+ QUERY a b : ask for the maximum edge cost on the path from node a to
  node b

*** solution 1[fn:2]



*** solution 2[fn:3]


* More
+ [[http://www.geeksforgeeks.org/heavy-light-decomposition-set-1-introduction/][Introduction]] and [[http://www.geeksforgeeks.org/heavy-light-decomposition-set-2-implementation/][implementation]] by geeksforgeeks
+ Description and application: http://e-maxx.ru/algo/heavy_light
+ Heavy Light Decomposition Description and application:
  https://blog.anudeep2011.com/heavy-light-decomposition/

* cc

#+begin_src c++

#+end_src

* Footnotes

[fn:1] http://wcipeg.com/wiki/Heavy-light_decomposition

[fn:2] http://www.geeksforgeeks.org/heavy-light-decomposition-set-2-implementation/

[fn:3] https://blog.anudeep2011.com/heavy-light-decomposition

[fn:4] http://www.spoj.com/problems/QTREE/





