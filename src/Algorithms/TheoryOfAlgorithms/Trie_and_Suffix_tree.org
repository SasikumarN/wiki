#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Trie and Suffix tree
#+OPTIONS: num:nil H:2

http://marknelson.us/1996/08/01/suffix-trees/

http://stevehanov.ca/blog/index.php?id=120

* Trie
A tree for storing strings in which there is one node for every common
prefix. The strings are stored in extra leaf nodes.[fn:1]

[[./files/Trie_example.svg]]
A trie for keys "A","to", "tea", "ted", "ten", "i", "in", and "inn".

* suffix tree
A compact representation of a trie corresponding to the suffixes of a
given string where all nodes with one child are merged with their
parents.[fn:2]

[[./files/Suffix_tree_BANANA.svg]]
Suffix tree for the text BANANA.

** Ukkonen's suffix tree algorithm
Ukkonen's paper on the algorithm: [[https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf][On–line construction of suffix trees]]

以下对[[http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english][Ukkonen algorithm]]的总结

*** 前言
1. 不同于搜索tire，边标识不是一个字符。而是用一对整数对 =[from,to]= 来
   标识。它们指向字符串。如此，每个边上有一个任意长度的字符串标签，但
   是之占用 $O(1)$ 空间。
*** 基本概念
首先演示用一个特别简单的字符串如何创建suffix tree，没有重复字符的字符
串：
#+begin_src sh
abc
#+end_src

整个算法从左往右一步步进行。一个字符一步，所以总的操作数是 $O(n)$ .

从左开始，先插入字符a，通过创建从root node(在左边）到leaf的边，并加上
标签 =[0,#]= ,指代这个边表示从位置0到 /当前结束点/ 为尾的子字符串，使
用符号 =#= 表示 /当前结束点/ ，这里在位置1（ =a= 的右边）

所以我们有了一颗初始的tree，如此：
[[./files/suffix/1.png]]

他表示：
[[./files/suffix/2.png]]

现在进行到位置2(=b= 的右边). *我们的目标是在每一步中插入到目前位置所有
的suffixes*.我们做到这些通过：
+ 扩展当前 =a= 的边到 =ab=
+ 为 =b= 插入一个新的边

我们的描述如下图：
[[./files/suffix/3.png]]

而它表示：
[[./files/suffix/4.png]]

我们发现两样东西：
+ 对边 =ab= 的表示同初始tree =[0,#]= *一样*, 它的意义自动得到改变，因
  为我们更新了当前位置 =#= 从1到2。
+ 每条边占用 $O(1)$ 的空间，因为它只包含2个指向字符串的指针，无论它表
  示多少个字符。

然后我们再次增加位置来更新tree，增加一个字符 =c= 到每个存在的边并且为
新suffix =c= 插入一个新的边。

描述如下：
[[./files/suffix/5.png]]

而它表示：
[[./files/suffix/6.png]]

我们发现：
+ 每一步后tree是到当前位置正确的suffix tree
+ 总共的步数和文本的字符数相同
+ 每一步总的算法  $O(1)$ .因为所有已存在的边通过后移的 =#= 来自动更新,
  然后为最后一个字符插入一条新的边，所有操作在 $O(1)$ 复杂度完成。所以
  对于长度n的字符串，只需要 $O(n)$ 的复杂度。
*** 第一个扩展：简单的重复
现在看一个更现实的字符串：
#+begin_src c++
abcabxabcd
#+end_src
它以之前例子的 =abc= 起始，然后重复 =ab= 并紧跟 =x= ，然后重复 =abc=
并紧跟 =d= .

*步骤从1到3：* 经过开始的3个步骤，我们得到之前例子的tree：
[[./files/suffix/7.png]]

*步骤4：* 移动 =#= 到位置4. 隐性更新所有边到这样：
[[./files/suffix/8.png]]

然后我们需要插入当前步骤最后的suffix =a= 到root。

在做这前，引入 *2个变量* (除了 =#= ）：
+ *active point* ，一个三元组（ =active_node=, =active_edge=,
  =active_length=)
+ =remainder= ，是一个整数表明还有多少个suffixes需要被插入

这两个实际的意义之后将明了，但现在我们可以这么说：
+ 在 =abc= 这个简单的例子中， active point总是 =(root, '\0x', 0)= ，也
  就是 =active_node= 是 root node, =active_edge= 是null字符 =‘\0x’=
  ，而 =active_length= 是0。这个的作用就是每一步插入的新边都在root
  node那作为全新创建的边插入。之后我们将知道为什么用三元组表示这个信息
  是必要的。
+ =remainder= 在每一步开始总是被设置为1。意思是在每一步最后我们需要插
  入suffixes的个数是1（总是最后那个字符）。

现在开始改变。当我们在root插入当前最后的字符 =a=, 我们注意到已经有一条
以 =a= 为起始的边，也就是 =abca=. 在此种情况下，我们做如下：
+ 我们 *不* 在root node插入新的边 =[4,#]= 。而我们注意到suffix =a= 已
  经在tree中。它结尾在一个长边的中间，但是我们并不被它干扰。我们把它留
  在那。
+ 我们 *设置 active pioint* 为 =(root,'a',1)= 。这个意思是active point
  现在在从root node中以 =a= 为起始点的边的中间某个位置，具体就是那条边
  的位置1后。我们注意到这条边只是用它的第一个字符 =a= 来指代。这样足够
  指定那条边是因为边已特定字符起始的是唯一的。
+ 同时增加 =remainder= ，所以在下一步开始它将是2.

*注意：* 当 *最后需要插入的suffix被发现已经在tree中存在*, tree本身 *不
会改变* (只更新active point和 =remainder= ). /到目前位置/ tree并没有正
确描述suffix tree，但它包含所有suffixes（因为最后的suffix =a= 隐性的被
包含）。所以除了更新这些参数（所欲都是固定长度，所以是 $O(1)$ ）， *没
有其他操作* 需要被做在此步。

*步骤5:* 更新目前位置 =#= 到5. 自动更新tree到这样：

[[./files/suffix/9.png]]

因为 *remainder 是2*.需要插入当前位置2个最后的suffixes： =ab= 和 =b=
。这基本是因为：
+ 之前步骤的suffix =a= 从没适应的插入。所以它被 /保留下来/ ，然后因为
  我们进行到下一步，它现在从 =a= 增长到 =ab= 。
+ 并且需要插入新的最终边 =b= .

实际上它意味我们去到 active point （指向 =abcab= 中 =a= 的后边），并插
入当期最后的字母 =b= 。 *但是* 再次 =b= 也已经在同样的边里了。

所以，再次，我们不改变这课tree。我们只是：
+ 更新active point成 =(root, 'a', 2)= (不变的node和edge，但现在指向
  =b= 的后面）
+ 增加 =remainder= 到3因为我们并没有在上一步插入最后的边，也没有在一步
  插入最后的边。

*澄清：* 在当前步，我们需要插入 =ab= 和 =b= 。但因为 =ab= 已经被发现，
我们更新 active point并没有试图插入 =b= 。为什么？因为如果 =ab= 在tree
中， 它的 *每个suffix* （包含 =b= ）必定也在tree中。也许只是 /隐式/ 的，
但是它必定在那，因为到目前我们建立tree的方式如此。

进行到 =step 6= 通过增加 =#= 。tree自动更新到：

[[./files/suffix/10.png]]

因为 *=remainder= 是 3* ，我们需要插入 =abx= ， =bx= 和 =x= 。active
point告诉我们 =ab= 在哪里结尾，所以我们只需要跳到哪里并插入 =x= 。的确，
=x= 不再那里，所以我们分叉边 =abcabx= 并插入一个内在node：

[[./files/suffix/11.png]]

边描述的仍然是指向文本的指针，所以分叉和插入一个内在node能在 $O(1)$ 时
间内完成。

所以我们需要处理 =abx= 并减少 =remainder= 到2。现在我们需要插入下一个
剩下的suffix =bx= 。但是在做这之前我们需要更新active point。对于这种情
况的规则，在分叉并插入一条边，将被称为 *Rule 1* ，并且它对只对
=actvie_node= 是root时适用。rule 1如下：

从root插入之后。
+ =active_node= 仍然是root
+ =active_edge= 被设置成新插入的suffix的首字符，比如 =b=
+ =active_length= 被减少1

因此，新的active-point三元组 =(root, 'b', 1)= 显示下一个插入在 =bcabx=
边的后面1个字符下，比如在 =b= 之后。我们去识别插入点能在 $O(1)$ 完成并
检查 =x= 是否已经存在。如果它存在，我们就这样结束此步。但 =x= 不存在，
所以我们通过分列此边来插入它：

[[./files/suffix/12.png]]

再次这需要 $O(1)$ 的时间并且我们更新 =remainder= 到1和active point到
=(root, 'x', 0)= 如rule 1所述。

但是我们还需要再做一件事。我们将这称为 *Rule 2*:


** Ukkonen's suffix tree algorithm codes
http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-6/


* More reference
+ [[http://www.cise.ufl.edu/~sahni/dsaaj/enrich/c16/suffix.htm][Suffix Trees]] by Sartaj Sahni
+ Mark Nelson's great [[http://marknelson.us/1996/08/01/suffix-trees/][Fast String Searching With Suffix Trees (C++)]]
  explains Ukkonen's linear-time algorithm
+ Ukkonen's Suffix Tree Implementation in C [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-1/][Part 1]] [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-2/][Part 2]] [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-3/][Part 3]] [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-4/][Part
  4]] [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-5/][Part 5]] [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-6/][Part 6]]
+ [[./files/strmat.tar.gz][Strmat]] - a variety of [[http://web.cs.ucdavis.edu/~gusfield/strmat.html][string matching and pattern discovery
  algorithms (C)]]
+ [[http://www.icir.org/christian/libstree/][libstree]] is a generic suffix tree implementation, written in C
+ [[http://www3.cs.stonybrook.edu/~algorith/files/suffix-trees.shtml][The Algorithm Design Manual]] summarize the Suffix Trees

* cc

#+begin_src c++

#+end_src

#+begin_src sh

#+end_src

* Footnotes

[fn:1] https://xlinux.nist.gov/dads//HTML/trie.html

[fn:2] https://xlinux.nist.gov/dads//HTML/suffixtree.html

