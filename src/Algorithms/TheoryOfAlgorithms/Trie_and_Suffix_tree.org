#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Trie and Suffix tree
#+OPTIONS: num:nil H:2

http://marknelson.us/1996/08/01/suffix-trees/

http://stevehanov.ca/blog/index.php?id=120

* Trie
A tree for storing strings in which there is one node for every common
prefix. The strings are stored in extra leaf nodes.[fn:1]

[[./files/Trie_example.svg]]
A trie for keys "A","to", "tea", "ted", "ten", "i", "in", and "inn".

* suffix tree
A compact representation of a trie corresponding to the suffixes of a
given string where all nodes with one child are merged with their
parents.[fn:2]

[[./files/Suffix_tree_BANANA.svg]]
Suffix tree for the text BANANA.

** Ukkonen's suffix tree algorithm
Ukkonen's paper on the algorithm: [[https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf][On–line construction of suffix trees]]

以下对[[http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english][Ukkonen algorithm]]的总结

*** 前言
1. 不同于搜索tire，边标识不是一个字符。而是用一对整数对 =[from,to]= 来
   标识。它们指向字符串。如此，每个边上有一个任意长度的字符串标签，但
   是之占用 $O(1)$ 空间。
*** 基本概念
首先演示用一个特别简单的字符串如何创建suffix tree，没有重复字符的字符
串：
#+begin_src sh
abc
#+end_src

整个算法从左往右一步步进行。一个字符一步，所以总的操作数是 $O(n)$ .

从左开始，先插入字符a，通过创建从root node(在左边）到leaf的边，并加上
标签 =[0,#]= ,指代这个边表示从位置0到 /当前结束点/ 为尾的子字符串，使
用符号 =#= 表示 /当前结束点/ ，这里在位置1（ =a= 的右边）

所以我们有了一颗初始的tree，如此：
[[./files/suffix/1.png]]

他表示：
[[./files/suffix/2.png]]

现在进行到位置2(=b= 的右边). *我们的目标是在每一步中插入到目前位置所有
的suffixes*.我们做到这些通过：
+ 扩展当前 =a= 的边到 =ab=
+ 为 =b= 插入一个新的边



** Ukkonen's suffix tree algorithm codes
http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-6/


* More reference
+ [[http://www.cise.ufl.edu/~sahni/dsaaj/enrich/c16/suffix.htm][Suffix Trees]] by Sartaj Sahni
+ Mark Nelson's great [[http://marknelson.us/1996/08/01/suffix-trees/][Fast String Searching With Suffix Trees (C++)]]
  explains Ukkonen's linear-time algorithm
+ Ukkonen's Suffix Tree Implementation in C [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-1/][Part 1]] [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-2/][Part 2]] [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-3/][Part 3]] [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-4/][Part
  4]] [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-5/][Part 5]] [[http://www.geeksforgeeks.org/ukkonens-suffix-tree-construction-part-6/][Part 6]]
+ [[./files/strmat.tar.gz][Strmat]] - a variety of [[http://web.cs.ucdavis.edu/~gusfield/strmat.html][string matching and pattern discovery
  algorithms (C)]]
+ [[http://www.icir.org/christian/libstree/][libstree]] is a generic suffix tree implementation, written in C
+ [[http://www3.cs.stonybrook.edu/~algorith/files/suffix-trees.shtml][The Algorithm Design Manual]] summarize the Suffix Trees

* cc

#+begin_src c++

#+end_src

#+begin_src sh

#+end_src

* Footnotes

[fn:1] https://xlinux.nist.gov/dads//HTML/trie.html

[fn:2] https://xlinux.nist.gov/dads//HTML/suffixtree.html

