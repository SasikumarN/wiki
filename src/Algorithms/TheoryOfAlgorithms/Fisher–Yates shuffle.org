#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Fisher–Yates shuffle
#+OPTIONS: num:nil H:2


* site
http://en.wikipedia.org/wiki/Fisher-Yates_shuffle#cite_note-nist-5

* The modern algorithm
#+begin_src sh
To shuffle an array a of n elements (indices 0..n-1):
  for i from n − 1 downto 1 do
       j ← random integer with 0 ≤ j ≤ i
       exchange a[j] and a[i]
#+end_src

* The "inside-out" algorithm
#+begin_src sh
To initialize an array a of n elements to a randomly shuffled copy of source, both 0-based:
  a[0] ← source[0]
  for i from 1 to n − 1 do
      j ← random integer with 0 ≤ j ≤ i
      a[i] ← a[j]
      a[j] ← source[i]
#+end_src

Another advantage of this technique is that the algorithm can be
modified so that we do not know "n", 

#+begin_src sh
To initialize an empty array a to a randomly shuffled copy of source whose length is not known:
  while source.moreDataAvailable
      j ← random integer with 0 ≤ j ≤ a.length
      if j = a.length
          a.append(source.next)
      else
          a.append(a[j])
          a[j] ← source.next
#+end_src
