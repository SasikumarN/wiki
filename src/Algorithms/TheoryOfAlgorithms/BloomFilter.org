#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Bloom filter
#+OPTIONS: num:nil H:2

* Overview
A Bloom filter is a space-efficient probabilistic data structure that
is used to test whether an element is a member of a set.[fn:1]
* Algorithm description
1. An *empty Bloom filter* is a bit array of m bits, all set to 0. There
   must also be k different hash functions defined, each of which maps
   or hashes some set element to one of the m array positions with a
   uniform random distribution.
2. To *add* an element, feed it to each of the k hash functions to get k
   array positions. Set the bits at all these positions to 1.
3. To *query* for an element (test whether it is in the set), feed it to
   each of the k hash functions to get k array positions. If any of
   the bits at these positions are 0, the element is definitely not in
   the set â€“ if it were, then all the bits would have been set to 1
   when it was inserted. If all are 1, then either the element is in
   the set, or the bits have by chance been set to 1 during the
   insertion of other elements, resulting in a *false positive*.

* Implementation in C
[[./files/bloom_filter/c/bloom.h][bloom.h]]
#+INCLUDE: "./files/bloom_filter/c/bloom.h" src c
[[./files/bloom_filter/c/bloom.c][bloom.c]]
#+INCLUDE: "./files/bloom_filter/c/bloom.c" src c
[[./files/bloom_filter/c/test.c][test.c]]
#+INCLUDE: "./files/bloom_filter/c/test.c" src c
[[./files/bloom_filter/c/Makefile][Makefile]]
#+INCLUDE: "./files/bloom_filter/c/Makefile" src c
Test files: [[./files/bloom_filter/c/wordlist][wordlist]] and [[./files/bloom_filter/c/check][check]]
#+begin_src sh
make
./test wordlist < check
#+end_src
* Footnotes

[fn:1] http://en.wikipedia.org/wiki/Bloom_filter


