#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Symas Lightning Memory-Mapped Database (LMDB) Notes
#+OPTIONS: num:nil H:2


* Overview
+ homepage: http://symas.com/mdb/
+ https://github.com/LMDB/lmdb
+ official repo on openldap.org:
  http://www.openldap.org/software/repo.html

LMDB(Lightning Memory-Mapped Database) is a tiny database with some great capabilities:
+ Ordered-map interface (keys are always sorted, supports range lookups)
+ Fully transactional, full ACID (Atomicity, Consistency, Isolation,
  Durability) semantics with MVCC(Multiversion concurrency control).
+ Reader/writer transactions: readers don't block writers and writers
  don't block readers. Writers are fully serialized, so writes are
  always deadlock-free.
+ Read transactions are extremely cheap, and can be performed using no
  mallocs or any other blocking calls.
+ Supports multi-thread and multi-process concurrency, environments
  may be opened by multiple processes on the same host.
+ Multiple sub-databases may be created with transactions covering all
  sub-databases.
+ Memory-mapped, allowing for zero-copy lookup and iteration.
+ Maintenance-free, no external process or background
  cleanup/compaction required.
+ Crash-proof, no logs or crash recovery procedures required.
+ No application-level caching. LMDB fully exploits the operating
  system's buffer cache.
+ 32KB of object code and 6KLOC of C.
* LMDB 基本架构

[[./Files/lmdb-arch.svg]]
* Memory Map原理
* B-tree/B+tree/B*tree
https://en.wikipedia.org/wiki/B-tree

https://en.wikipedia.org/wiki/B%2B_tree

https://www.cs.usfca.edu/~galles/visualization/BTree.html
* COW and MVCC

* 事务控制

* 核心代码流程

* LMDB 核心数据结构
#+begin_src c++

#+end_src

#+begin_src c++

#+end_src

#+begin_src c++

#+end_src

#+begin_src c++

#+end_src


* xx

http://symas.com/mdb/doc/starting.html




http://gridmix.blog.51cto.com/4764051/1693699


* cc
#+begin_src python

#+end_src

#+begin_src c++

#+end_src


#+begin_src sh

#+end_src
