#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE:  C++ puzzles and FAQ
#+OPTIONS: num:nil H:2


* Explain the difference between templates in C++ and generics in Java.
http://en.wikipedia.org/wiki/Comparison_of_Java_and_C%2B%2B#Templates_vs._Generics

* Differences between C++ Classes and Structs
** members and inheritance
that members of a class are private by default, whereas members of a
struct are public by default. Inheritance between classes is also
private by default, and inheritance between structs is public by
default. 

** a struct inheriting from a class and a class inheriting from a struct
#+begin_src c
class A
{
   public:
      int a;
};

struct B : A { };

struct C
{
      int c;
};

class D : C { };

int main()
{
   B b;
   D d;
   b.a = 1;
   d.c = 2;
}
#+end_src
Although a recent version of the GNU project C++ compiler treats the
assignment of 2 into d.c in the above example as a compile-time error,
a programmer who is more interested in standards compliance should
refer to the C++ standard. After all, compilers do not determine
standard behavior; standards prescribe standard behavior for
compilers. The GNU project C++ compiler is consistent with 11.2.2 of
ISO/IEC 14882-2003, which states that the kind of inheritance is
determined by the derived class being declared as a class or struct
when an access specificer for the base class is absent.
** Inheritance differences?[fn:1]
+ a struct is implicitly sealed, a class isn't.
+ a struct can't be abstract, a class can.
+ a struct can't call : base() in its constructor whereas a class with no explicit base class can.
+ a struct can't extend another class, a class can.
+ a struct can't declare protected members (eg fields, nested types) a class can.
+ a struct can't declare abstract function members, an abstract class can.
+ a struct can't declare virtual function members, a class can.
+ a struct can't declare sealed function members, a class can.
+ a struct can't declare override function members, a class can. The
  one exception to this rule is that a struct can override the virtual
  methods of System.Object, viz, Equals(), and GetHashCode(), and
  ToString().

* return statement vs exit() in main()
When exit(0) is used to exit from program, destructors for locally
scoped non-static objects are not called. But destructors are called
if return 0 is used. Note that static objects will be cleaned up even
if we call exit().
#+begin_src c
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
 
using namespace std;
 
class Test {
public:
  Test() {
    printf("Inside Test's Constructor\n");
  }
 
  ~Test(){
    printf("Inside Test's Destructor");
    getchar();
  }
};
 
int main() {
  Test t1;
 
  // using exit(0) to exit from main
  exit(0);
}
Output:
Inside Test’s Constructor
#+end_src

#+begin_src c
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
 
using namespace std;
 
class Test {
public:
  Test() {
    printf("Inside Test's Constructor\n");
  }
 
  ~Test(){
    printf("Inside Test's Destructor");
  }
};
 
int main() {
  Test t1;
 
   // using return 0 to exit from main
  return 0;
}
Output:
Inside Test’s Constructor
Inside Test’s Destructor
#+end_src

#+begin_src c
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
 
using namespace std;
 
class Test {
public:
  Test() {
    printf("Inside Test's Constructor\n");
  }
 
  ~Test(){
    printf("Inside Test's Destructor");
    getchar();
  }
};
 
int main() {
  static Test t1;  // Note that t1 is static
 
  exit(0);
}
Output:
Inside Test’s Constructor
Inside Test’s Destructor
#+end_src

* =static_cast=, =const_cast=, =dynamic_cast=, =reinterpret_cast= and =C casts=
More: http://stackoverflow.com/questions/332030/when-should-static-cast-dynamic-cast-and-reinterpret-cast-be-used
** =static_cast=
=static_cast= is the first cast you should attempt to use. It does
things like implicit conversions between types (such as int to float,
or pointer to void*), and it can also call explicit conversion
functions (or implicit ones). In many cases, explicitly stating
=static_cast= isn't necessary, but it's important to note that the
=T(something)= syntax is equivalent to =(T)something= and should be
avoided.

=static_cast= can also cast through inheritance hierarchies. It is
unnecessary when casting upwards (towards a base class), but when
casting downwards it can be used as long as it doesn't cast through
=virtual= inheritance. It *does not do checking*, however, and it is
*undefined behavior* to static_cast down a hierarchy to a type that
isn't actually the type of the object.（并不推荐使用于多态对象）。

** =const_cast=
=const_cast= can be used to remove or add =const= to a variable; no other
C++ cast is capable of removing it (not even =reinterpret_cast=). This
can be useful when overloading member functions based on const, for
instance. It can also be used to add const to an object, such as to
call a member function overload.

=const_cast= also works similarly on =volatile=, though that's less common.

** =dynamic_cast=
主要处理多态。
=dynamic_cast= is almost exclusively used for handling *polymorphism*. You
can cast a pointer or reference to any polymorphic type to any other
class type (a polymorphic type has at least one virtual function,
declared or inherited). You can use it for more than just casting
downwards -- you can cast sideways or even up another chain. The
=dynamic_cast= will seek out the desired object and return it if
possible.（会检查）If it can't, it will return =NULL= in the case of a pointer,
or =throw std::bad_cast= in the case of a reference.

=dynamic_cast= has some limitations, though. It doesn't work if there
are multiple objects of the same type in the inheritance hierarchy
(the so-called 'dreaded diamond') and you aren't using =virtual=
inheritance. It also can only go through public inheritance - it will
always fail to travel through =protected= or =private= inheritance. This
is rarely an issue, however, as such forms of inheritance are rare.

** =reinterpret_cast=
主要处理底层bit的重新释义。
reinterpret_cast is the most dangerous cast, and should be used very
sparingly. It turns one type directly into another - such as casting
the value from one pointer to another, or storing a pointer in an =int=,
or all sorts of other nasty things. Largely, the only guarantee you
get with =reinterpret_cast= is that normally if you cast the result back
to the original type, you will get the exact same value (but /not/ if
the intermediate type is smaller than the original type). 

There are a number of conversions that =reinterpret_cast= cannot do,
too. It's used primarily for particularly weird conversions and bit
manipulations, like turning a raw data stream into actual data, or
storing data in the low bits of an aligned pointer.

** =C casts=
进行如下的顺序的cast，会隐式用 =reinterpret_cast= ，比较危险。

C casts are casts using (type)object or type(object). A C-style cast
is defined as the first of the following which succeeds:
+ =const_cast=
+ =static_cast=
+ =static_cast=, then =const_cast=
+ =reinterpret_cast=
+ =reinterpret_cast=, then =const_cast=

It can therefore be used as a replacement for other casts in some
instances, but can be extremely dangerous because of the ability to
devolve into a =reinterpret_cast=, and the latter should be preferred
when explicit casting is needed, unless you are sure =static_cast= will
succeed or =reinterpret_cast= will fail. Even then, consider the longer,
more *explicit* option.


C-style casts also ignore access control when performing a
=static_cast=, which means that they have the ability to perform an
operation that no other cast can. This is mostly a kludge, though, and
in my mind is just another reason to avoid C-style casts.

* How to implement dynamic_cast?
http://en.cppreference.com/w/cpp/language/typeid

http://www.cppblog.com/Ipedo/archive/2005/12/12/1699.html

http://stackoverflow.com/questions/3174104/how-to-write-own-dynamic-cast


http://www.codeproject.com/Articles/609598/Priori-A-Fast-dynamic-cast-Alternative

* std::bind the overloaded function
#+begin_src c++
  #include <iostream>
  #include <functional>
  #include <string>
  using namespace std;
  class Foo {
   public:
    void print(int a) {
      cout << "int: " << a << endl;
    }
    void print(string a) {
      cout << "string: " << a << endl;
    }
  };

  double f(double x) {
    return x;
  }
  int main() {
    function<void(int)> func1;
    Foo foo;
    func1 = bind(&Foo::print, foo, placeholders::_1);
    return 0;
  }
#+end_src

Compile it will dump below error:
#+begin_src sh
./func_same_name.cc: In function ‘int main()’:
./func_same_name.cc:29:50: error: no matching function for call to ‘bind(<unresolved overloaded function type>, Foo&, const std::_Placeholder<1>&)’
   func1 = bind(&Foo::print, foo, placeholders::_1);
                                                  ^
./func_same_name.cc:29:50: note: candidates are:
In file included from ./func_same_name.cc:2:0:
#+end_src

** use =static_cast= to disambiguate the address of the overloaded function
1. the function
#+begin_src c++
function<double(void)> func =
      std::bind(static_cast<double(&)(double)>(f), 2.);
#+end_src

2. class member function
#+begin_src c++
  Foo foo;
  func = bind(static_cast<void(Foo::*)(int)>(&Foo::print),
                 foo, placeholders::_1);
#+end_src

* A Simple Garbage Collector for C++ 
http://www.devarticles.com/c/a/Cplusplus/A-Simple-Garbage-Collector-for-C-plus-plus/3/

* Footnotes

[fn:1] http://www.jaggersoft.com/pubs/StructsVsClasses.htm#inheritance differences


