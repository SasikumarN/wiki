#+SETUPFILE: ~/.emacs.d/src/org-templates/level-2.org
#+TITLE: Slob, Slab VS Slub
#+OPTIONS: num:nil H:2



* Overview
First, "slab" has become a generic name referring to a memory
allocation strategy employing an object cache, enabling efficient
allocation and deallocation of kernel objects. It was first documented
by Sun engineer Jeff Bonwick and implemented in the Solaris 2.4
kernel.[fn:1]

Linux currently offers three choices for its "slab" allocator :

Slab is the original, based on Bonwick's seminal paper and available
since Linux kernel version 2.2. It is a faithful implementation of
Bonwick's proposal, augmented by the multiprocessor changes described
in Bonwick's follow-up paper[fn:2].

Slub is the next-generation replacement memory allocator, which has
been the default in the Linux kernel since 2.6.23. It continues to
employ the basic "slab" model, but fixes several deficiencies in
Slab's design, particularly around systems with large numbers of
processors. Slub is simpler than Slab.


SLOB (Simple List Of Blocks) is a memory allocator optimized for
embedded systems with very little memoryâ€”on the order of megabytes. It
applies a very simple first-fit algorithm on a list of blocks, not
unlike the old K&R-style heap allocator. In eliminating nearly all of
the overhad from the memory allocator, SLOB is a good fit for systems
under extreme memory constraints, but it offers none of the benefits
described in 1 and can suffer from pathological fragmentation.



* cc
#+begin_src python

#+end_src

#+begin_src c++

#+end_src


#+begin_src sh

#+end_src

* Footnotes

[fn:1] http://stackoverflow.com/questions/15470560/what-to-choose-between-slab-and-slub-allocator-in-linux-kernel

[fn:2] http://static.usenix.org/event/usenix01/full_papers/bonwick/bonwick.pdf

